{"version":3,"sources":["components/Header.js","components/Footer.js","context/PortfolioContext.js","components/WorkItem.js","components/WorkCategory.js","components/Modal.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Header","memo","active","category","clickNav","id","className","href","map","cate","index","key","type","onClick","name","Footer","PortfolioContext","createContext","img_path","openModal","WorkItem","work","useContext","title","subtitle","date","url","thumbnail","src","alt","target","rel","WorkCategory","project","prevProps","nextProps","Modal","prev","next","closeModal","mainDev","info","images","pages","page","image","Loading","reducer","state","action","loading","initialState","App","useReducer","dispatch","useCallback","html","document","querySelector","body","style","overflowY","useEffect","a","fetchApiData","fetch","res","json","data","projectData","categoryData","portfolioContext","Provider","value","filter","proj","Math","max","indexOf","min","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da5ebfbf.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nconst Header = memo(({ active, category, clickNav}) => {\n  return (\n    <>\n      <header id=\"header\">\n        <div className=\"container\">\n          <h1><a href=\"/portfolio\">seoyoon jung</a></h1>\n          <nav>\n            <ul>\n              {category.map((cate, index) => \n                  <li key={cate.id} className={(!active.id && index === 0 ) || active.id === cate.id ? 'active' : ''}><button type=\"button\" onClick={() => {clickNav(cate)}}>{cate.name}</button></li>\n              )}\n            </ul>\n          </nav>\n        </div>\n      </header>\n    </>\n  )\n})\n\nexport default Header;","import React, { memo } from 'react';\n\nconst Footer = memo(() => {\n  return (\n    <>\n      <footer>\n        <div className=\"container\">\n          <p>&copy; 2020 seoyoon jung All Rights Reserved. </p>\n        </div>\n      </footer>\n    </>\n  )\n})\n\nexport default Footer;","import { createContext } from 'react';\n\nexport const PortfolioContext = createContext({\n  img_path: '/images/thumbnail/',\n  openModal: () => {}\n});","import React, { memo, useContext } from 'react';\nimport { PortfolioContext } from '../context/PortfolioContext';\n\nconst WorkItem = memo(({ work }) => {\n    \n  const { img_path, openModal } = useContext(PortfolioContext);\n  const { title, subtitle, date, url, thumbnail } = work; \n\n  return (\n    <>\n      <li>\n        <img src={img_path+thumbnail} alt={title} />\n        <div>\n          <div className=\"info\">\n            <span className=\"title\">{title}</span>\n            <span className=\"subtitle\">{subtitle}</span>\n            <span className=\"date\">{date}</span>\n          </div>\n          <div className=\"anchor\">\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn link\">link</a>\n            <button type=\"button\" className=\"btn detail\" onClick={()=> openModal(work)}>details</button>\n          </div>\n        </div>\n      </li>\n    </>\n  )    \n})\n\nexport default WorkItem;","import React, { memo } from 'react';\nimport WorkItem from './WorkItem';\n\nconst WorkCategory = memo(({ title, project }) => {\n  return (\n    <article>\n      <div className=\"container\">\n        <h1>{title}</h1>\n        <ul>\n          {\n            project.map((work, index) => \n              <WorkItem work={work} key={work.id+index} />\n            )\n          }\n        </ul>\n      </div>\n    </article>\n  )\n}, (prevProps, nextProps) => prevProps.title === nextProps.title)\n\nexport default WorkCategory;","import React, { memo, useContext } from 'react';\nimport { PortfolioContext } from '../context/PortfolioContext';\n\nconst Modal = memo(({ work, prev, next, closeModal }) => {\n\n  const { img_path, openModal }  = useContext(PortfolioContext);\n  const { title, subtitle, url, mainDev, info, images, pages, date } = work;\n\n  return (\n    <>\n      <article id=\"modal\">\n        <span className=\"dim\" onClick={closeModal}></span>\n        <div className=\"modal_popup\">\n          <div>\n            <header>\n              <h1>{title}</h1>\n              <span className=\"subtitle\">{subtitle}</span>\n              <span className=\"date\">{date}</span>\n            </header>\n            <section>\n              <a href={url} target=\"_blank\" className=\"link\">{mainDev ? url : 'HTML페이지 바로가기'}</a>\n              {\n                pages && \n                <ul className=\"page\">\n                  {\n                    pages.map((page, index) => <li key={`page${index}`}><a href={page.url} target=\"_blank\">{page.name}</a></li>)\n                  }\n                </ul>\n              }\n              <ul className=\"info\">\n              {\n                info.map((info, index) => <li key={`info${index}`}>{info}</li>)\n              }\n              </ul>\n              <ul className=\"img\">\n              {\n                images.map((image, index) => <li key={`image${index}`}><span><img src={img_path+image} alt={`${title} ${subtitle}`} /></span></li>)\n              }\n              </ul>\n            </section>\n          </div>\n          <button type=\"button\" className=\"close\" onClick={closeModal}><span></span><span></span></button>\n        </div>\n        <button type=\"button\" className=\"move prev\" onClick={()=> openModal(prev)}><span></span><span></span></button>\n        <button type=\"button\" className=\"move next\" onClick={()=> openModal(next)}><span></span><span></span></button>\n      </article>\n    </>\n  )\n})\n\nexport default Modal;","import React from 'react';\n\nconst Loading = () => {\n  return (\n    <>\n      <div id=\"loading\"></div>\n    </>\n  )\n}\n\nexport default Loading;","import React, { useEffect, useCallback, useReducer } from 'react';\nimport './scss/App.scss';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport WorkCategory from './components/WorkCategory';\nimport Modal from './components/Modal';\nimport Loading from './components/Loading';\nimport { PortfolioContext } from './context/PortfolioContext';\n\nconst reducer = (state, action)=> {\n  switch(action.type) {\n    case 'DATA_LOADED':\n      return  {\n        ...state,\n        project: action.project,\n        category: action.category,\n        active: action.active,\n        loading: action.loading\n      }\n    case 'SET_WORK':\n      return {\n        ...state,\n        work: action.work\n      }\n    case 'SET_ACTIVE':\n      return {\n        ...state,\n        active: action.active\n      }\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  project: [],\n  category: [],\n  active: {},\n  work: false,\n  loading: true\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const img_path = '/portfolio/images/thumbnail/';\n\n  const openModal = useCallback((work) => {\n    const html = document.querySelector('html');\n    const body = document.querySelector('body');\n    html.style.overflowY = 'hidden';\n    body.style.overflowY = 'scroll';\n\n    dispatch({type:'SET_WORK', work});\n  }, []);\n\n  const closeModal = useCallback(() => {\n    const html = document.querySelector('html');\n    const body = document.querySelector('body');\n    html.style.overflowY = '';\n    body.style.overflowY = '';\n\n    dispatch({type:'SET_WORK', work: null});\n  }, []);\n\n  const clickNav = useCallback((active) => {\n    dispatch({type:'SET_ACTIVE', active});\n  }, []);\n  \n  useEffect(() => {\n    (async function(){\n      const fetchApiData = async (page) => {\n        const path = '/portfolio/data/db.json';\n        const res = await fetch(path);\n        const data = await res.json();\n        return data[page];\n      }\n      \n      const projectData = await fetchApiData('project');\n      const categoryData = await fetchApiData('category');\n      \n      dispatch({type: 'DATA_LOADED', project: projectData, category: categoryData, active:categoryData[0], loading: false});\n    })();\n  }, []);\n\n  const portfolioContext = { img_path, openModal };\n  const { project, category, active, work, loading } = state;\n  return (\n    <>\n      <Header active={active} category={category} clickNav={clickNav} />\n      <PortfolioContext.Provider value={portfolioContext}>\n        <main>\n          {loading && <Loading/>}\n          { \n            category.filter(cate => !active.id ? cate.id : active.id === cate.id).map(cate => \n              <WorkCategory title={cate.name} project={project.filter(proj => proj.id === cate.id)} key={cate.id} />\n            )\n          }\n        </main>\n        <Footer />\n        { work && <Modal work={work} closeModal={closeModal} prev={project[Math.max(project.indexOf(work)-1, 0)]} next={project[Math.min(project.indexOf(work)+1, project.length-1)]} /> }\n      </PortfolioContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}